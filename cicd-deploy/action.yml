name: 'CI/CD Deploy'

description: 'Deployment image via flux repository configured to appropriate GCP project'

inputs:
# required inputs
  release_name:
    description: 'Application name to use for release'
    required: true
  gh_auth_token:
    description: 'Github auth token for Flux deployment repository'
    required: true
  commit_hash:
    description: 'Application repository hash applied to release'
    required: true
  git_repo_branch:
    description: 'Application repository branch to release'
    required: true

# overridable defaults
  app_instance:
    description: 'Instance name applied to deployment, typically '
    required: false
    default: 'test'
  flux_repo_base:
    description: 'Flux repository base name'
    required: false
    default: gcp-flux-
  flux_repo_owner:
    description: 'Flux repository owner'
    required: false
    default: uw-it-aca
  helm_chart_branch:
    description: 'Helm chart repository branch at the base of release'
    required: false
    default: 'master'
  helm_chart_name:
    description: 'Helm chart repository used to produce release manifest'
    required: false
    default: 'django-production-chart'
  helm_app_version:
    description: 'Helm application version used to produce release manifest'
    required: false
    default: '3.4.2'
  kubeval_version:
    description: 'Kubeval version used to lint kubernetes manifest'
    required: false
    default: 'latest'
  kubeval_skip_kinds:
    description: 'List of manifest objects for Kubeval to ignore'
    required: false
    default: 'ExternalSecret,ServiceMonitor'
  checkov_version:
    description: 'Checkov security policy manifest scanner version'
    required: false
    default: 'latest'
  checkov_skip_checks:
    description: 'Checkov security policy viloations to ignore'
    required: false
    # acceptable policy violations:
    #    CKV_K8S_21 - default namespace policy
    #    CKV_K8S_35 - secret files preferred over environment
    #    CKV_K8S_43 - image reference by digest
    #    CKV_K8S_106 - terminated-pod-gc-threshold set by MCI
    #    CKV_K8S_107 - kubernetes infrastructure profiling controlled by MCI
    default: 'CKV_K8S_21,CKV_K8S_35,CKV_K8S_43,CKV_K8S_106,CKV_K8S_107'

outputs:
  context:
    description: "Serialized JSON context for this release"
    value: ${{ steps.context.outputs.json_context }}

runs:
  using: 'composite'

  steps:
    - name: Deployment Context and Environment
      id: context
      shell: bash
      run: |
        echo "::group::Context"

        export JSON_CONTEXT=""

        function set_context {
          echo "$1 = $2"
          export ${1^^}=${2}
          echo "${1^^}=${2}" >> $GITHUB_ENV
          if [[ -n $JSON_CONTEXT ]]; then COMMA="," ; else COMMA="" ; fi
          JSON_CONTEXT="${JSON_CONTEXT}${COMMA}\"${1}\": \"${2}\""
        }

        set_context commit_hash ${{ inputs.commit_hash }}
        set_context git_repo_branch ${{ inputs.git_repo_branch }}

        # master/main branch hardwired to prod GCP instance and "prod" app instance
        case ${GIT_REPO_BRANCH} in
          main|master)
              APP_INSTANCE="prod"
              FLUX_INSTANCE="prod"
              GCP_PROJECT="uwit-mci-0011"
              FLUX_RELEASE_SUFFIX=""
              ;;
          *)
              APP_INSTANCE="${{ inputs.app_instance }}"
              FLUX_INSTANCE="dev"
              GCP_PROJECT="uwit-mci-0010"
              FLUX_RELEASE_SUFFIX=""
              if [ $APP_INSTANCE != "test" ]; then
                FLUX_RELEASE_SUFFIX="-${APP_INSTANCE}"
              fi
              ;;
        esac

        # set up deploy context
        set_context app_instance             ${APP_INSTANCE}
        set_context app_name                 ${{ inputs.release_name }}-prod-${APP_INSTANCE}
        set_context flux_base_name           ${{ inputs.release_name }}${FLUX_RELEASE_SUFFIX}
        set_context manifest_file_name       ${FLUX_BASE_NAME}.yaml
        set_context manifest_file_name       $MANIFEST_FILE_NAME
        set_context local_manifest           ${PWD}/$MANIFEST_FILE_NAME
        set_context helm_chart_local_dir     ${PWD}/${{ inputs.helm_chart_name }}
        set_context flux_repo_base           ${{ inputs.flux_repo_base }}
        set_context flux_repo_owner          ${{ inputs.flux_repo_owner }}
        set_context flux_repo_name           ${FLUX_REPO_BASE}${FLUX_INSTANCE}
        set_context flux_repo_path           ${FLUX_REPO_OWNER}/$FLUX_REPO_NAME
        set_context flux_release_branch      release/${FLUX_INSTANCE}/${FLUX_BASE_NAME}
        set_context flux_release_branch_name ${FLUX_RELEASE_BRANCH}/${COMMIT_HASH}
        set_context flux_release_manifest    releases/${FLUX_INSTANCE}/$MANIFEST_FILE_NAME
        set_context flux_local_dir           ${PWD}/$FLUX_REPO_NAME
        set_context flux_pr_output           ${PWD}/pr-${FLUX_INSTANCE}-${{ inputs.release_name }}-${COMMIT_HASH}.json
        set_context commit_message           "Automated ${FLUX_INSTANCE} deploy of ${{ github.repository }}:${COMMIT_HASH} build ${{ github.run_id }}"
        set_context pull_request_message     "Automated ${FLUX_INSTANCE} deploy of [${{ github.repository }}:${COMMIT_HASH}](/${{ github.repository }}/commit/${COMMIT_HASH})  Generated build [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

        JSON_CONTEXT=\'{${JSON_CONTEXT}}\'
        echo "json_context = $JSON_CONTEXT"
        echo "::endgroup::"
        echo "::set-output name=json_context::${JSON_CONTEXT}"

        echo "#####################################"
        echo "DEPLOY $APP_NAME in ${GCP_PROJECT}"
        echo "#####################################"

    - name: Clone Helm Chart
      shell: bash
      run: >-
        export HELM_CHART_REPO_PATH="https://github.com/${FLUX_REPO_OWNER}/${{ inputs.helm_chart_name }}.git" &&
        echo "CLONE chart repository $HELM_CHART_REPO_PATH (${{ inputs.helm_chart_branch }})" &&
        git clone --depth 1 $HELM_CHART_REPO_PATH
        --branch ${{ inputs.helm_chart_branch }}
        ${HELM_CHART_LOCAL_DIR}

    - name: Generate App Manifest
      shell: bash
      run: >-
        export HELM_CHART_VALUES="/app/docker/${APP_INSTANCE}-values.yml" &&
        echo "GENERATE release manifest ${MANIFEST_FILE_NAME} using $HELM_CHART_VALUES" &&
        docker run -v ${PWD}:/app
        -v ${HELM_CHART_LOCAL_DIR}:/chart
        alpine/helm:${{ inputs.helm_app_version }}
        template ${APP_NAME} /chart
        --set-string "image.tag=${COMMIT_HASH}"
        -f $HELM_CHART_VALUES > ${LOCAL_MANIFEST}

    - name: Validate Manifest
      shell: bash
      run: >-
        echo "VALIDATE generated manifest ${MANIFEST_FILE_NAME}" &&
        docker run -t -v ${PWD}:/app
        garethr/kubeval:${{ inputs.kubeval_version }}
        /app/${MANIFEST_FILE_NAME}
        --strict --skip-kinds "${{ inputs.kubeval_skip_kinds }}"

    - name: Security Policy Scan
      shell: bash
      run: |
        if [[ -n $(grep -e '^\s*securityContext\:.*$' "${LOCAL_MANIFEST}") ]]; then
          echo "SCAN generated manifest ${MANIFEST_FILE_NAME} against security policies"
          CHECKOV_IMAGE="bridgecrew/checkov:${{ inputs.checkov_version }}"
          docker run -t -v ${PWD}/:/app "$CHECKOV_IMAGE" --quiet --skip-check "${{ inputs.checkov_skip_checks }}" -f /app/${MANIFEST_FILE_NAME}
        else
          echo "Security Policy Scan Skipped: no context found"
        fi

    - name: Clone Flux Repository
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.gh_auth_token }}"
        echo "CLONE flux repository ${FLUX_REPO_PATH}"

        git clone https://${{ inputs.gh_auth_token }}@github.com/${FLUX_REPO_PATH}.git --branch master ${FLUX_LOCAL_DIR}

    - name: Create Flux Release Branch
      shell: bash
      run: |
        echo "CREATE branch $FLUX_RELEASE_BRANCH_NAME, add $FLUX_RELEASE_MANIFEST"

        cd $FLUX_LOCAL_DIR
        git checkout -b ${FLUX_RELEASE_BRANCH_NAME}
        cp -p ${LOCAL_MANIFEST} ${FLUX_RELEASE_MANIFEST}
        git add ${FLUX_RELEASE_MANIFEST}
        git status

    - name: Commit Flux Release
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.gh_auth_token }}"
        echo "COMMIT flux release $FLUX_RELEASE_BRANCH_NAME"

        cd $FLUX_LOCAL_DIR
        git config user.email "aca-it@uw.edu"
        git config user.name "uw-it-aca-tools"
        git commit -m "${COMMIT_MESSAGE}" ${FLUX_RELEASE_MANIFEST}
        git push origin ${FLUX_RELEASE_BRANCH_NAME}
        git status

    - name: Submit Flux Pull Release
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.gh_auth_token }}"
        echo "SUBMIT $FLUX_RELEASE_BRANCH_NAME pull request"
        GITHUB_REPO_PULLS="https://api.github.com/repos/${FLUX_REPO_PATH}/pulls"
        PR_DATA=$(cat <<EOF
        {
          "title": "${COMMIT_MESSAGE}",
          "body": "${PULL_REQUEST_MESSAGE}",
          "head": "${FLUX_RELEASE_BRANCH_NAME}",
          "base": "master"
        }
        EOF
        )

        curl -H "Authorization: Token ${{ inputs.gh_auth_token }}" -H "Content-type: application/json" -X POST ${GITHUB_REPO_PULLS} >${FLUX_PR_OUTPUT} -d @- <<<${PR_DATA}
        FLUX_PULL_URL=$(jq '.html_url' ${FLUX_PR_OUTPUT})
        echo "FLUX_PULL_URL=$FLUX_PULL_URL" >> $GITHUB_ENV
        echo "SUBMITTED $FLUX_PULL_URL"

    - name: Merge Flux Pull Request
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.gh_auth_token }}"
        MERGE_DATA=$(cat <<EOF
        {
          "commit_title": "Automated merge of ${PULL_REQUEST_MESSAGE}",
          "commit_message": "Automated merge of ${PULL_REQUEST_MESSAGE}",
          "sha": $(jq '.head.sha' ${FLUX_PR_OUTPUT}),
          "merge_method": "merge"
        }
        EOF
        )

        if [[ $GIT_REPO_BRANCH =~ ^(main|master)$ ]]; then
          echo "Visit $FLUX_PULL_URL to merge manifest branch"
        else
          echo "MERGING ${FLUX_PULL_URL}"
          GITHUB_API_MERGE="$(jq --raw-output '.url' ${FLUX_PR_OUTPUT})/merge"
          curl -H "Authorization: Token ${{ inputs.gh_auth_token }}" -H "Content-type: application/json" -X PUT $GITHUB_API_MERGE -d @- <<<${MERGE_DATA}
        fi
