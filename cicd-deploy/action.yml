name: 'CI/CD Deploy'

description: 'Deployment image via flux repository configured to appropriate GCP project'

inputs:
  release_name:
    description: 'Application name to use for release'
    required: true
  gh_auth_token:
    description: 'Github auth token for Flux deployment repository'
    required: true
  context:
    description: 'Config and derived values to support deployment'
    required: true
  app_instance:
    description: 'Instance applied '
    required: false
    default: 'test'
  helm_chart_branch:
    description: 'Helm chart repository branch at the base of release'
    required: false
    default: 'master'
  helm_chart_name:
    description: 'Helm chart repository used to produce release manifest'
    required: false
    default: 'django-production-chart'
  helm_app_version:
    description: 'Helm application version used to produce release manifest'
    required: false
    default: '3.4.2'
  kubeval_version:
    description: 'Kubeval version used to lint kubernetes manifest'
    required: false
    default: 'latest'
  kubeval_skip_kinds:
    description: 'List of manifest objects for Kubeval to ignore'
    required: false
    default: 'ExternalSecret,ServiceMonitor'
  checkov_version:
    description: 'Checkov security policy manifest scanner version'
    required: false
    default: 'latest'
  checkov_skip_checks:
    description: 'Checkov security policy viloations to ignore'
    required: false
    # acceptable policy violations:
    #    CKV_K8S_21 - default namespace policy
    #    CKV_K8S_35 - secret files preferred over environment
    #    CKV_K8S_43 - image reference by digest
    #    CKV_K8S_106 - terminated-pod-gc-threshold set by MCI
    #    CKV_K8S_107 - kubernetes infrastructure profiling controlled by MCI
    default: 'CKV_K8S_21,CKV_K8S_35,CKV_K8S_43,CKV_K8S_106,CKV_K8S_107'


runs:
  using: 'composite'

  steps:
    - name: Deployment Context and Environment
      id: context
      shell: bash
      run: |
        # master/main branch hardwired to prod GCP instance and "prod" app instance
        case ${{ inputs.context.git_repo_branch }} in
          main|master)
              APP_INSTANCE="prod"
              FLUX_INSTANCE="prod"
              GCP_PROJECT="uwit-mci-0011"
              FLUX_RELEASE_SUFFIX=""
              ;;
          *)
              APP_INSTANCE="${{ inputs.app_instance }}"
              FLUX_INSTANCE="dev"
              GCP_PROJECT="uwit-mci-0010"
              FLUX_RELEASE_SUFFIX=""
              if [ $APP_INSTANCE != "test" ]; then
                FLUX_RELEASE_SUFFIX="-${APP_INSTANCE}"
              fi
              ;;
        esac

        echo APP_INSTANCE="$APP_INSTANCE" >> $GITHUB_ENV

        APP_NAME=${{ inputs.release_name }}-prod-${APP_INSTANCE}
        echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

        echo "#####################################"
        echo "DEPLOY $APP_NAME in ${GCP_PROJECT}"
        echo "#####################################"

        FLUX_BASE_NAME=${{ inputs.release_name }}${FLUX_RELEASE_SUFFIX}

        MANIFEST_FILE_NAME=${FLUX_BASE_NAME}.yaml
        echo "MANIFEST_FILE_NAME=$MANIFEST_FILE_NAME" >> $GITHUB_ENV

        LOCAL_MANIFEST=${PWD}/$MANIFEST_FILE_NAME
        echo "LOCAL_MANIFEST=$LOCAL_MANIFEST" >> $GITHUB_ENV

        # helm chart
        HELM_CHART_LOCAL_DIR=${PWD}/${{ inputs.helm_chart_name }}
        echo "HELM_CHART_LOCAL_DIR=$HELM_CHART_LOCAL_DIR" >> $GITHUB_ENV

        # local paths
        FLUX_LOCAL_DIR=${PWD}/${{ inputs.context.flux_repo_name }}
        echo "FLUX_LOCAL_DIR=$FLUX_LOCAL_DIR" >> $GITHUB_ENV

        FLUX_PR_OUTPUT=${PWD}/pr-${FLUX_INSTANCE}-${{ inputs.release_name }}-${{ inputs.context.commit_hash }}.json
        echo "FLUX_PR_OUTPUT=$FLUX_PR_OUTPUT" >> $GITHUB_ENV

        # flux commit messages
        COMMIT_MESSAGE="Automated ${FLUX_INSTANCE} deploy of ${{ github.repository }}:${{ inputs.context.commit_hash }} build ${{ github.run_id }}"
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        PULL_REQUEST_MESSAGE="Automated ${FLUX_INSTANCE} deploy of [${{ github.repository }}:${{ inputs.context.commit_hash }}](/${{ github.repository }}/commit/${{ inputs.context.commit_hash }})  Generated build [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        echo "PULL_REQUEST_MESSAGE=$PULL_REQUEST_MESSAGE" >> $GITHUB_ENV

    - name: Clone Helm Chart
      shell: bash
      run: >-
        export HELM_CHART_REPO_PATH="https://github.com/${{ inputs.context.flux_repo_owner }}/${{ inputs.helm_chart_name }}.git" &&
        echo "CLONE chart repository $HELM_CHART_REPO_PATH (${{ inputs.helm_chart_branch }})" &&
        git clone --depth 1 $HELM_CHART_REPO_PATH
        --branch ${{ inputs.helm_chart_branch }}
        ${HELM_CHART_LOCAL_DIR}

    - name: Generate App Manifest
      shell: bash
      run: >-
        export HELM_CHART_VALUES="/app/docker/${APP_INSTANCE}-values.yml" &&
        echo "GENERATE release manifest $MANIFEST_FILE_NAME using $HELM_CHART_VALUES" &&
        docker run -v ${PWD}:/app
        -v ${HELM_CHART_LOCAL_DIR}:/chart
        alpine/helm:${{ inputs.helm_app_version }}
        template ${APP_NAME} /chart
        --set-string "image.tag=${{ inputs.context.commit_hash }}"
        -f $HELM_CHART_VALUES > ${LOCAL_MANIFEST}

    - name: Validate Manifest
      shell: bash
      run: >-
        echo "VALIDATE generated manifest ${MANIFEST_FILE_NAME}" &&
        docker run -t -v ${PWD}:/app
        garethr/kubeval:${{ inputs.kubeval_version }}
        /app/${MANIFEST_FILE_NAME}
        --strict --skip-kinds "${{ inputs.kubeval_skip_kinds }}"

    - name: Security Policy Scan
      shell: bash
      run: |
        exit 0
        if [[ -n $(grep -e '^\s*securityContext\:.*$' "${LOCAL_MANIFEST}") ]]; then
          echo "SCAN generated manifest $MANIFEST_FILE_NAME against security policies"
          CHECKOV_IMAGE="bridgecrew/checkov:${{ inputs.checkov_version }}"
          docker run -t -v ${PWD}/:/app "$CHECKOV_IMAGE" --quiet --skip-check "${{ inputs.checkov_skip_checks }}" -f /app/${MANIFEST_FILE_NAME}
        else
          echo "Security Policy Scan Skipped: no context found"
        fi

    - name: Clone Flux Repository
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.gh_auth_token }}"
        echo "CLONE flux repository ${{ inputs.context.flux_repo_path }}"

        git clone --level 1 https://${{ inputs.gh_auth_token }}@github.com/${{ inputs.context.flux_repo_path }}.git --branch master ${FLUX_LOCAL_DIR}

    - name: Create Flux Release Branch
      shell: bash
      run: |
        echo "CREATE branch ${{ inputs.context.flux_release_branch_name }}, add ${{ inputs.context.flux_release_manifest }}"
        cd $FLUX_LOCAL_DIR
        exit 0
        git checkout -b ${{ inputs.context.flux_release_branch_name }}
        cp -p ${LOCAL_MANIFEST} ${{ inputs.context.flux_release_manifest }}
        git add ${{ inputs.context.flux_release_manifest }}
        git status

    - name: Commit Flux Release
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.gh_auth_token }}"
        echo "COMMIT flux release ${{ inputs.context.flux_release_branch_name }}"
        exit 0
        cd $FLUX_LOCAL_DIR
        git config user.email "aca-it@uw.edu"
        git config user.name "uw-it-aca-tools"
        git commit -m "${COMMIT_MESSAGE}" ${{ inputs.context.flux_release_manifest }}
        git push origin ${{ inputs.context.flux_release_branch_name }}
        git status

    - name: Submit Flux Pull Release
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.gh_auth_token }}"
        echo "SUBMIT ${{ inputs.context.flux_release_branch_name }} pull request"
        exit 0
        GITHUB_REPO_PULLS="https://api.github.com/repos/${{ inputs.context.flux_repo_path }}/pulls"
        PR_DATA=$(cat <<EOF
        {
          "title": "${COMMIT_MESSAGE}",
          "body": "${PULL_REQUEST_MESSAGE}",
          "head": "${{ inputs.context.flux_release_branch_name }}",
          "base": "master"
        }
        EOF
        )

        curl -H "Authorization: Token ${{ inputs.gh_auth_token }}" -H "Content-type: application/json" -X POST ${GITHUB_REPO_PULLS} >${FLUX_PR_OUTPUT} -d @- <<<${PR_DATA}
        FLUX_PULL_URL=$(jq '.html_url' ${FLUX_PR_OUTPUT})
        echo "FLUX_PULL_URL=$FLUX_PULL_URL" >> $GITHUB_ENV
        echo "SUBMITTED $FLUX_PULL_URL"

    - name: Merge Flux Pull Request
      env:
        GIT_REPO_BRANCH: ${{ inputs.context.git_repo_branch }}
      shell: bash
      run: |
        exit 0
        echo "::add-mask::${{ inputs.gh_auth_token }}"
        MERGE_DATA=$(cat <<EOF
        {
          "commit_title": "Automated merge of ${PULL_REQUEST_MESSAGE}",
          "commit_message": "Automated merge of ${PULL_REQUEST_MESSAGE}",
          "sha": $(jq '.head.sha' ${FLUX_PR_OUTPUT}),
          "merge_method": "merge"
        }
        EOF
        )

        if [[ $GIT_REPO_BRANCH =~ ^(main|master)$ ]]; then
          echo "Visit $FLUX_PULL_URL to merge manifest branch"
        else
          echo "MERGING ${FLUX_PULL_URL}"
          GITHUB_API_MERGE="$(jq --raw-output '.url' ${FLUX_PR_OUTPUT})/merge"
          curl -H "Authorization: Token ${{ inputs.gh_auth_token }}" -H "Content-type: application/json" -X PUT $GITHUB_API_MERGE -d @- <<<${MERGE_DATA}
        fi
