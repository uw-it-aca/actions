name: 'CI/CD Housekeeping'

description: 'Manage artifacts from build and deploy processses'

inputs:
# required inputs
  release_name:
    description: 'Application name to use for release'
    required: true
  gh_auth_token:
    description: 'Github auth token for Flux repository'
    required: true
  context:
    description: 'Configuration and derived values for deployment'
    required: true

# overridable defaults
  prune_flux_repository:
    description: 'Actually prune release manifests'
    required: false
    default: false
  prune_flux_preserve_count:
    description: 'Number of flux repo branches to preserve when pruning'
    required: false
    default: 6
  prune_image_registry:
    description: 'Prune image registry'
    required: false
    default: false

runs:
  using: 'composite'

  steps:
    - name: Setup Context
      shell: bash
      id: context
      run: |
        echo "::group::Context"

        function set_context {
          echo "$1 = $2"
          echo "${1^^}=${2}" >> $GITHUB_ENV
        }

        # pull in input.context
        while read -r -a kv; do
          set_context ${kv[0]} ${kv[1]}
        done <<< "$(echo ${{ inputs.context }} \
                  | jq -r 'keys[] as $k | "\($k) \(.[$k])"')"

        set_context flux_local_dir ${PWD}/${FLUX_REPO_NAME}

        echo "::endgroup::"

    - name: Clone Flux Repository
      shell: bash
      run: |
        echo "::add-mask::${GH_AUTH_TOKEN}"
        echo "Prune ${FLUX_REPO_PATH} repository"

        git clone https://${GH_AUTH_TOKEN}@github.com/${FLUX_REPO_PATH}.git --branch master $FLUX_LOCAL_DIR

    - name: Gather stale branches associated with ${FLUX_RELEASE_BRANCH}
      id: references
      shell: bash
      run: |
        cd $FLUX_LOCAL_DIR

        PRUNE_PRESERVE=$(expr 2 + ${{ inputs.prune_flux_preserve_count }})
        PRUNE_REFS=$(git for-each-ref --merged master --sort='-creatordate' --format='%(refname:strip=3)' "refs/remotes/origin/${FLUX_RELEASE_BRANCH}/" | tail -n +${PRUNE_PRESERVE})

        if [[ -n $PRUNE_REFS ]]; then
          echo "The following branches are stale:"
          echo "${PRUNE_REFS}"
          echo "::set-output name=prune_references::${PRUNE_REFS}"
        else
          echo "There are currently no stale branches to prune."
        fi

    - name: Prune Flux Repository
      shell: bash
      if: inputs.prune_flux_repository
      run: |
        cd $FLUX_LOCAL_DIR

        if [[ -n "${{ steps.references.outputs.prune_references}}" ]]; then
          echo "WOULD git push delete:"
          echo "${{ steps.references.outputs.prune_references}}"
          #### echo "${{ steps.references.outputs.prune_references}}" | xargs git push --delete origin
        fi

    - name: Prune Image Registry
      if: inputs.prune_image_registry
      shell: bash
      run: |
        python3 - <<EOF
        import os
        import re
        import requests

        release_name = "${{ inputs.release_name }}"

        docker_jwt_token = None
        registry_host = "hub.docker.com"

        # environment variables
        #   GH_TOKEN - Github auth token
        #   REGISTRY_USER - Docker image registry owner
        #   REGISTRY_PASSWORD -  Docker image registry password

        def referenced_tags(release_name):
            preserve_tags = []
            for instance in ['dev', 'prod']:
                branch_url = ('https://api.github.com/repos/{}/{}{}/'
                              'branches?page=1&per_page=100').format(
                    ${FLUX_REPO_OWNER}, ${FLUX_REPO_BASE}, instance)
                branch_re = re.compile('^release/{}/{}(-[a-z]+)?/([a-f0-9]+)$'.format(
                    instance, release_name))

                while branch_url:
                    response = requests.get(branch_url, headers={
                        "Authorization": "Token {}".format(os.getenv('GH_TOKEN')),
                        "Content-type": "application/vnd.github.v3+json"})
                    if response.status_code != requests.codes.ok:
                        print("failed to get branches ({}): {}".format(
                            response.status_code, branch_url))
                        exit(1)

                    for branch in response.json():
                        m = re.match(branch_re, branch['name'])
                        if m:
                            preserve_tags.append(m.group(2))

                    try:
                        branch_url = response.links['next']['url']
                    except KeyError:
                        branch_url = None

            return preserve_tags


        def registry_tags(release_name):
            registry_tags = []
            repo_tag_url = ('https://{}/v2/repositories/{}/{}/tags/'
                            '?page=1&page_size=100').format(
                                registry_host, os.getenv('REGISTRY_USER'), release_name)
            while True:
                raw = requests.get(repo_tag_url)
                if raw.status_code != requests.codes.ok:
                    break

                response = raw.json()
                registry_tags.extend(response['results'])
                if response['next']:
                    repo_tag_url = response['next']
                else:
                    break

            registry_tags.sort(key=lambda x: x['last_updated'])
            return registry_tags


        def docker_jwt_access_token(release_name):
            global docker_jwt_token

            if docker_jwt_token is None:
                docker_registry_url = 'https://{}/v2/users/login/'.format(registry_host)
                headers = {'Content-Type': 'application/json'}
                raw = requests.post(docker_registry_url, headers=headers, json={
                    "username": "{}".format(os.getenv('REGISTRY_USER')),
                    "password": "{}".format(os.getenv('REGISTRY_PASSWORD'))})
                if raw.status_code != requests.codes.ok:
                    raise Exception("Cannot acquire token")

                docker_jwt_token = raw.json()['token']

            return docker_jwt_token


        def delete_image_tag(release_name, tag):
            delete_url = 'https://{}/v2/repositories/{}/{}/tags/{}/'.format(
                registry_host, os.getenv('REGISTRY_USER'),
                release_name, tag['name'])
            headers = {'Authorization': 'JWT {}'.format(
                docker_jwt_access_token(release_name))}
            response = requests.delete(delete_url, headers=headers)
            if response.status_code == requests.codes.no_content:
                print("DELETED: {}".format(delete_url))

            raise Exception("failed to delete tag ({}): {}".format(
                response.status_code, delete_url))


        if __name__ == '__main__':
            try:
                flux_tags = referenced_tags(release_name)

                if len(flux_tags) < 1:
                    raise Exception("Bailing because finding no referenced tags is weird.")

                registry_tags = registry_tags(release_name)

                for tag in registry_tags:
                    if tag['name'] in flux_tags:
                        flux_tags.remove(tag['name'])
                    else:
                        delete_image_tag(release_name, tag)
                        # just delete one while we're debugging
                        break

                if len(flux_tags) > 0:
                    print("Flux references with no corresponding image: {}".format(flux_tags))
            except Exception as ex:
                # pruning issues should never block deployment
                print("Image pruning problem: {}".format(ex))

            raise SystemExit(0)
        EOF
